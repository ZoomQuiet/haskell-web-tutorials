0a1
> {-# LANGUAGE DeriveGeneric #-}
4a6
> import GHC.Generics
5a8,10
> import Data.Aeson
> import Data.Aeson.Types (typeMismatch)
> import qualified Data.Vector as V
7d11
< import qualified Data.ByteString.Lazy as L
19c23,29
< type SimpleState = L.ByteString
---
> newtype SimpleState = SimpleState Int
>     deriving (Generic)
> 
> instance ToJSON SimpleState
> instance FromJSON SimpleState where
>     parseJSON (Array vec) = return $ SimpleState $ V.length vec
>     parseJSON o = typeMismatch "SimpleState" o
26c36
<         return $ response d
---
>         return $ response (encode d)
37c47,49
<         Right rsp -> void $ forcePutMVar state rsp
---
>         Right rsp -> maybe (putStrLn "decode json failed.")
>                            (void . forcePutMVar state)
>                            (decode rsp)
